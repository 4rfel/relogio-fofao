; vim:fileencoding=utf-8:syntax=asm

; Codigo em assembly do relogio

; R4 = flag_setup

; RAM(0) segundos
; RAM(1) minutos
; RAM(2) horas

; RAM(3) segundos_base10
; RAM(4) minutos_base10
; RAM(5) horas_base10


;BaseTempo           221
;LED0                222
;LED1                223
;SW0                 224
;SW1                 225
;HEX0, HEX1          226
;HEX2, HEX3          227
;HEX4, HEX5          228
;BUT                 229
;BaseTempoFast       230



lea R4, $0

lea R7, $0

st $0, R7
st $1, R7
st $2, R7

st $228, R7
st $227, R7
st $226, R7


set_time:
	ld R3, $229
	lea R1, $8
	and R4, R1, R3
	cmp R1, R4
	jne setR4
	
	lea R1, $1
	and R2, R1, R3
	cmp R1, R2
	jne inc_sec
	
	lea R1, $2
	and R2, R1, R3
	cmp R1, R2
	jne inc_min
	
	lea R1, $4
	and R2, R1, R3
	cmp R1, R2
	jne inc_hr
	
	jmp set_time
	

setR4:
	st $0, R4
	st $222, R4
	jmp choose_timer
	nop

choose_timer:
	ld R0, $225
	lea R1, $1
	and R0, R1, R0
	st $223, R0
	cmp R0, R1
	jne timer 
	jmp timer_fast


timer:
	ld R0, $221 ; base de tempo
	lea R1, $1
	and R0, R1, R0
	cmp R0, R1
	jne choose_timer ;jmp se base de tempo != 1

	rst

	jmp inc_sec

timer_fast:
	ld R0, $230 ; base de tempo rapida
	lea R1, $1
	and R0, R1, R0
	cmp R0, R1
	jne choose_timer ;jmp se base de tempo != 1

	rst

	jmp inc_sec


inc_sec:
	ld R0, $0
	inc R0
	lea R1, $60
	cmp R0, R1
	jne end_inc_sec
	lea R0, $0
	st $0, R0
	jmp inc_min

end_inc_sec:
	st $0, R0
	jmp write_HEX

inc_min:
	ld R0, $1
	inc R0
	lea R1, $60
	cmp R0, R1
	jne end_inc_min
	lea R0, $0
	st $1, R0
	jmp inc_hr

end_inc_min:
	st $1, R0
	jmp write_HEX

inc_hr:
	ld R0, $2
	inc R0
	lea R1, $24
	cmp R0, R1
	jne end_inc_hr
	lea R0, $0
	st $2, R0
	jmp write_HEX

end_inc_hr:
	st $2, R0
	jmp write_HEX

write_HEX:
	ld R0, $0
	st $226, R0
	ld R0, $1
	st $227, R0
	ld R0, $2
	st $228, R0

	lea R0, $0
	cmp R4, R0
	jne set_time

	jmp choose_timer
