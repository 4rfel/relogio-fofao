; vim:fileencoding=utf-8:syntax=asm

; Codigo em assembly do relogio

; R4 = flag_setup

; RAM(0) segundos
; RAM(1) minutos
; RAM(2) horas

; RAM(3) flag_alarm



;BaseTempo           221
;LED0                222
;LED1                223
;SW0                 224
;SW1                 225
;HEX0, HEX1          226
;HEX2, HEX3          227
;HEX4, HEX5          228
;BUT                 229
;BaseTempoFast       230


lea R4, $0

st $0, R4
st $1, R4
st $2, R4
st $3, R4
st $5, R4

st $69, R4


st $228, R4
st $227, R4
st $226, R4



set_time:
	ld R3, $229
	lea R0, $8
	and R1, R3, R0
	cmp R0, R1
	jne setR4

	lea R0, $4
	and R1, R3, R0
	cmp R0, R1
	jne inc_hr

	lea R0, $2
	and R1, R3, R0
	cmp R0, R1
	jne inc_min

	lea R0, $1
	and R1, R3, R0
	cmp R0, R1
	jne inc_sec
	
	jmp set_time
	

setR4:
	not R4
	jmp choose_timer

resetR4:
	not R4
	lea R0, $0 ; reseting leds alarm
	st $3, R0 ; reseting leds alarm
	st $223, R0 ; reseting leds alarm
	jmp set_time

choose_timer:
	ld R3, $229
	lea R0, $8
	and R1, R3, R0
	cmp R0, R1
	jne resetR4

	ld R0, $225
	lea R1, $2
	and R2, R1, R0
	st $3, R2
	cmp R2, R1
	jne clear_alarm

	lea R1, $1
	and R0, R1, R0
	or R3, R2, R0
	ld R0, $5
	or R3, R0, R3
	st $223, R3


	ld R0, $225
	lea R1, $1
	and R0, R1, R0
	cmp R0, R1
	jne timer
	jmp timer_fast


timer:
	ld R0, $221 ; base de tempo
	lea R1, $1
	and R0, R1, R0
	cmp R0, R1
	jne choose_timer ;jmp se base de tempo != 1
	jmp reset_timer

timer_fast:
	ld R0, $230 ; base de tempo rapida
	lea R1, $1
	and R0, R1, R0
	cmp R0, R1
	jne choose_timer ;jmp se base de tempo != 1
	jmp reset_timer

reset_timer:
	rst
	ld R0, $3
	lea R1, $2
	cmp R0, R1
	je dec_sec

	jmp inc_sec


inc_sec:
	ld R0, $0
	inc R0
	lea R1, $60
	cmp R0, R1
	jl end_inc_sec
	lea R0, $0
	st $0, R0
	jmp inc_min

end_inc_sec:
	st $0, R0
	jmp write_HEX

inc_min:
	ld R0, $1
	inc R0
	lea R1, $60
	cmp R0, R1
	jl end_inc_min
	lea R0, $0
	st $1, R0
	jmp inc_hr

end_inc_min:
	st $1, R0
	jmp write_HEX

inc_hr:
	ld R0, $2
	inc R0
	lea R1, $12
	cmp R0, R1
	jl end_inc_hr
	lea R0, $0
	st $2, R0
	jmp am_pm

end_inc_hr:
	st $2, R0
	jmp write_HEX

am_pm:
	ld R0, $69
	not R0
	st $69, R0
	st $222, R0
	jmp write_HEX

write_HEX:
	ld R0, $0
	st $226, R0
	ld R0, $1
	st $227, R0
	ld R0, $2
	st $228, R0

	lea R0, $255
	cmp R0, R4
	jne wait_but

	jmp choose_timer

wait_but:
	ld R3, $229
	lea R0, $15
	cmp R0, R3
	jne wait_but
	jmp set_time

dec_sec:
	ld R0, $0
	dec R0
	lea R1, $0
	cmp R0, R1
	jg end_dec_sec
	ld R0, $1
	lea R1, $0
	cmp R0, R1
	je min_zerado
	lea R0, $59
	st $0, R0
	jmp dec_min

min_zerado:
	lea R0, $0
	st $0, R0
	st $226, R0
	jmp alarm

end_dec_sec:
	st $0, R0
	jmp write_HEX

dec_min:
	ld R0, $1
	dec R0
	lea R1, $0
	cmp R0, R1
	jg end_dec_min
	ld R0, $2
	lea R1, $0
	cmp R0, R1
	je hr_zerado
	lea R0, $59
	st $1, R0
	jmp dec_hr

hr_zerado:
	lea R0, $0
	st $1, R0
	st $227, R0
	jmp write_HEX

end_dec_min:
	st $1, R0
	jmp write_HEX

dec_hr:
	ld R0, $2
	dec R0
	lea R1, $0
	cmp R0, R1
	jg end_dec_hr
	lea R0, $0
	st $2, R0
	jmp write_HEX

end_dec_hr:
	st $2, R0
	jmp write_HEX

alarm:
	ld R0, $4
	lea R1, $0
	cmp R0, R1
	jne pisca_off
	lea R0, $1
	st $4, R0
	lea R0, $168
	st $5, R0
	jmp choose_timer

pisca_off:
	lea R0, $0
	st $4, R0
	lea R0, $84
	st $5, R0
	jmp choose_timer

clear_alarm:
	lea R0, $0
	st $5, R0
	jmp choose_timer