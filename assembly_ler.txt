;Codigo em assembly do relogio

; R4 = flag_setup

; RAM(0) segundos
; RAM(1) minutos
; RAM(2) horas

; RAM(3) segundos_base10
; RAM(4) minutos_base10
; RAM(5) horas_base10

setup:
	lea R4, $0
	st $0, R4
	st $1, R4
	st $2, R4
	
	st $226, R4
	st $227, R4
	st $228, R4

	jmp setR4


set_time:
	ld R3, $229
	lea R1, $8
	and R4, R1, R3
	cmp R1, R4
	jne setR4
	nop
	lea R1, $1
	and R2, R1, R3
	cmp R1, R2
	jne inc_sec
	nop
	lea R1, $2
	and R2, R1, R3
	cmp R1, R2
	jne inc_min
	nop
	lea R1, $4
	and R2, R1, R3
	cmp R1, R2
	jne inc_hrs
	nop
	jmp set_time
	nop

	
setR4:
	st $0, R4
	jmp choose_timer
	nop
	
choose_timer:
	ld R2, $225
	lea R1, $1
	and R3, R1, R2
	cmp R3, R1
	je timer_fast
	nop
	jmp timer
	nop
	
timer:
	ld R0, $221
	lea R1, $1
	cmp R1, R0
	jne choose_timer ;test if a second has passed
	nop
	rst
	jmp logica_tempo
	nop
	
timer_fast:
	ld R0, $230
	lea R1, $1
	cmp R1, R0
	jne choose_timer
	nop
	rst
	jmp logica_tempo
	nop
	
logica_tempo:
	jmp inc_sec
	nop
voltar:
	jmp write_HEX
	nop
	
inc_sec:
	ld R7, $0
	inc R7
	lea R1, $60
	cmp R7, R1
	jge inc_min
	nop
	st $0, R7
	lea R1, $1
	cmp R4, R1
	je set_time
	nop
	jmp voltar
	nop

inc_min:
	lea R7, $0
	st $1, R7
	ld R7, $1
	inc R7
	lea R1, $60
	cmp R7, R1
	jge inc_hrs
	nop
	st $1, R7
	lea R1, $1
	cmp R4, R1
	je set_time
	nop
	jmp voltar
	nop

inc_hrs:
	lea R7, $0
	st $2, R7
	ld R7, $2
	lea R1, $24
	cmp R7, R1
	jge inc_hrs
	nop
	st $2, R7
	lea R1, $1
	cmp R4, R1
	je set_time
	nop
	jmp voltar
	nop
	
write_HEX:
	ld R7, $0
	st $226, R7
	ld R7, $1
	st $227, R7
	ld R7, $2
	st $228, R7
	lea R1, $1
	cmp R4, R1
	je set_time
	nop
	jmp choose_timer
	nop
