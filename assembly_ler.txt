setup:
	lea R4, $0
	st $0, R4
	st $1, R4
	st $2, R4
	
	st $226, R4
	st $227, R4
	st $228, R4
	
	jmp setR4


set_time:
	ld R3, $229
	lea R1, $8
	and R4, R1, R3
	cmp R1, R4
	jne setR4
	nop
	lea R1, $1
	and R2, R1, R3
	cmp R1, R2
	jne inc_sec
	nop
	lea R1, $2
	and R2, R1, R3
	cmp R1, R2
	jne inc_min
	nop
	lea R1, $4
	and R2, R1, R3
	cmp R1, R2
	jne inc_hrs
	nop
	jmp set_time
	nop

setR4:
	st $0, R4
	jmp choose_timer
	nop

choose_timer:
	ld R2, $225
	lea R1, $1
	and R3, R1, R2
	cmp R3, R1
	je timer_fast
	nop
	jmp timer
	nop

timer:
	ld R0, $221
	lea R1, $1
	cmp R1, R0
	jne choose_timer ;test if a second has passed
	nop
	rst
	jmp logica_tempo
	nop

timer_fast:
	ld R0, $230
	lea R1, $1
	cmp R1, R0
	jne choose_timer
	nop
	rst
	jmp logica_tempo
	nop


logica_tempo:
inc_sec:
	; u8* secp = 0;
	; u8 sec = *secp;
	; sec++;
	; if (sec >= 60) {
	;     sec = 0;
	; }
	; *secp = sec
	
	ld R0, $0
	inc R0
	lea R1, $60
	cmp R0, R1 ; (0) < 60
	jl inc_sec_st
	lea R0, $0
inc_sec_st:
	st $0, R0
	jmp end_inc

inc_min:
	; u8* minp = 1;
	; u8 min = *minp;
	; min++;
	; if (min >= 60) {
	;     min = 0;
	; }
	; *minp = min
	
	ld R0, $1
	inc R0
	lea R1, $60
	cmp R0, R1 ; (1) < 60
	jl inc_min_st
	lea R0, $0
inc_min_st:
	st $1, R0
	jmp end_inc

inc_hrs:
	; u8* hourp = 2;
	; u8 hour = *hourp;
	; hour++;
	; if (hour >= 24) {
	;     hour = 0;
	; }
	; *hourp = hour
	
	ld R0, $2
	inc R0
	lea R1, $24
	cmp R0, R1 ; (2) < 24
	jl inc_hrs_st
	lea R0, $0
inc_hrs_st:
	st $2, R0
	jmp end_inc


end_inc:
	lea R1, $1
	cmp R4, R1
	je set_time
	jmp voltar

voltar:
write_HEX:
	ld R7, $0
	st $226, R7
	ld R7, $1
	st $227, R7
	ld R7, $2
	st $228, R7
	
	lea R1, $1
	cmp R4, R1
	je set_time
	nop
	jmp choose_timer
	nop

